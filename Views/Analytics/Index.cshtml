@model XBCAD7319_SparkLine_HR_WebApp.Models.Analytics

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analytics</title>

    <!-- External Styles and Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/attendance.css" />
    <link rel="stylesheet" href="~/css/analytics.css" />
    <link rel="stylesheet" href="~/css/calendar.css" />
    <script src="~/js/Calendar.js"></script>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>

    <!-- Header Section -->
    <div class="header">
        <div class="logo-container">
            <div class="hr-logo"></div>
        </div>
        <h2 class="welcome-text">Analytics Summary</h2>
        <h2 class="heading">SparkLine</h2>
    </div>

    <div class="content-wrapper">
        <!-- Sidebar Container -->
        <div class="sidebar-container">
            <div class="sidebar">
                <h2>Management</h2>
                <ul class="sidebar-menu">
                    <li><a asp-controller="Home" asp-action="MainDashboard">Dashboard</a></li>
                    <li><a asp-controller="Employee" asp-action="Management">Employee Management</a></li>
                    <li><a asp-controller="Attendance" asp-action="Index">Attendance</a></li>
                    <li><a asp-controller="Analytics" asp-action="Index">Analytics</a></li>
                    <li><a asp-controller="Employee" asp-action="Details">Onboarding</a></li>
                    <li><a asp-controller="PerformanceReviews" asp-action="CreateReview">Performance</a></li>
                    <li><a href="#" onclick="confirmLogout()">Logout</a></li>
                </ul>
            </div>
        </div>

        <div class="content-wrapper" style="margin-left: 270px">
            <!-- Table for Filters and Graphs -->
            <table class="table table-bordered mt-5">
                <tr>
                    <!-- Yearly Employee Count Section -->
                    <td>
                        <h4>Last 12 Months Employee Count</h4>
                        <div class="form-group">
                        </div>
                        <div class="chart-container">
                            <canvas id="yearlyEmployeeChart"></canvas>
                        </div>
                    </td>

                    <td>
                        <h4>Performance Reviews</h4>
                        <div class="form-group mb-3">
                            <label for="reviewEmployeeSelect">Select Employee:</label>
                            <select id="reviewEmployeeSelect" class="form-control">
                                <!-- Populate dynamically with employee data -->
                            </select>
                        </div>
                        <div class="chart-container">
                            <canvas id="performanceReviewChart"></canvas>
                        </div>
                    </td>
                </tr>
                <tr>
                </tr>
            </table>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <script>
            console.log('@Url.Action("GetYearlyEmployeeCount", "Analytics")');
            console.log('@Url.Action("GetPerformanceReviews", "Analytics")');

            // Call the function on page load
            $(document).ready(function () {
                populateEmployeeDropdown();
            });


            // Yearly Employee Count

            $(document).ready(function () {
                // Automatically fetch and render the chart on page load
                fetchYearlyEmployeeCount();
            });

            function fetchYearlyEmployeeCount() {
                $.ajax({
                    url: '@Url.Action("GetYearlyEmployeeCount", "Analytics")',
                    type: 'GET',
                    success: function (response) {
                        console.log("Yearly count data:", response); // Log for debugging
                        if (response.success) {
                            renderYearlyEmployeeCountGraph(response);
                        } else {
                            alert('Failed to fetch data.');
                        }
                    },
                    error: function (error) {
                        console.error("Error fetching data:", error);
                    }
                });
            }


            function renderYearlyEmployeeCountGraph(response) {
                const data = response.data; // Extract the data part

                console.log("Rendering yearly graph with data:", data);

                if (!data || Object.keys(data).length === 0) {
                    alert('No data available for the past 12 months.');
                    return;
                }

                const labels = [];
                const counts = [];
                const currentDate = new Date();
                const oneYearAgo = new Date();
                oneYearAgo.setMonth(currentDate.getMonth() - 11);

                // Generate a list of the past 12 months
                for (let d = new Date(oneYearAgo); d <= currentDate; d.setMonth(d.getMonth() + 1)) {
                    const monthLabel = d.toLocaleString('default', { month: 'long', year: 'numeric' });
                    labels.push(monthLabel);

                    // Format the date key to match the backend data (YYYY-MM-DD)
                    const formattedDateKey = d.toISOString().split('T')[0].slice(0, 7); // YYYY-MM

                    console.log("Formatted Date Key for this month:", formattedDateKey); // Debug log

                    // Now check all keys in the data and log them
                    const count = Object.keys(data).reduce((sum, key) => {
                        console.log("Checking key:", key); // Debug log to see all keys

                        // Check if the key starts with the formattedDateKey (ignoring time)
                        if (key.startsWith(formattedDateKey)) {
                            console.log(`Match found for ${key}: ${data[key]}`); // Debug log for match
                            return sum + data[key];
                        }
                        return sum;
                    }, 0);

                    // Push the count to the dataset
                    counts.push(count);
                }

                console.log("Final labels:", labels);
                console.log("Final counts:", counts);

                // Render the chart
                new Chart(document.getElementById('yearlyEmployeeChart'), {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Employees Hired',
                            data: counts,
                            backgroundColor: 'rgba(54, 162, 235, 0.6)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            x: { title: { display: true, text: 'Month' } },
                            y: { title: { display: true, text: 'Employees' } }
                        }
                    }
                });
            }



            $(document).ready(function () {
                $.ajax({
                    url: '@Url.Action("GetEmployees", "Analytics")',
                    type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            const employeeSelect = $('#reviewEmployeeSelect');
                            response.data.forEach(employee => {
                                console.log("KeyVALUE:", employee.key);
                                employeeSelect.append(
                                    `<option value="${employee.Key}">${employee.name}</option>`
                                );
                            });

                            // Automatically fetch the first employee's reviews
                            if (response.data.length > 0) {
                                console.log("ResponseKEY", response.data[0].key);
                                fetchPerformanceReviews(response.data[0].key);
                            }
                        } else {
                            alert('Failed to fetch employees.');
                        }
                    },
                    error: function () {
                        alert('Error fetching employees.');
                    }
                });

                // Fetch reviews when the selected employee changes
                $('#reviewEmployeeSelect').change(function () {
                    const employeeId = $(this).val();
                    fetchPerformanceReviews(employeeId);
                });
            });




            function renderPerformanceReviewGraph(data) {
                const labels = data.map(review => new Date(review.reviewDate).toLocaleDateString());
                const ratings = data.map(review => {
                    console.log(review.performanceRating)
                    switch (review.performanceRating) {
                        case 'Excellent': return 5;
                        case 'Good': return 4;
                        case 'Average': return 3;
                        case 'Below Average': return 2;
                        case 'Poor': return 1;
                        default: return 0;
                    }
                });

                const ctx = document.getElementById('performanceReviewChart').getContext('2d');
                if (window.performanceChart) {
                    window.performanceChart.destroy(); // Destroy the previous chart if it exists
                }
                window.performanceChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Performance Rating',
                            data: ratings,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderWidth: 2,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const ratingValue = context.raw;
                                        const ratingText = {
                                            5: 'Excellent',
                                            4: 'Good',
                                            3: 'Average',
                                            2: 'Below Average',
                                            1: 'Poor'
                                        }[ratingValue] || 'Unknown';
                                        return `${ratingText} (${ratingValue})`;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: { title: { display: true, text: 'Review Date' } },
                            y: {
                                title: { display: true, text: 'Rating' },
                                min: 0,
                                max: 5,
                                ticks: {
                                    stepSize: 1,
                                    callback: function (value) {
                                        return {
                                            5: 'Excellent',
                                            4: 'Good',
                                            3: 'Average',
                                            2: 'Below Average',
                                            1: 'Poor',
                                            0: ''
                                        }[value];
                                    }
                                }
                            }
                        }
                    }
                });
            }




            // Fetch and render Performance Reviews graph
            function fetchPerformanceReviews(employeeId) {
                $.ajax({
                    url: '@Url.Action("GetPerformanceReviews", "Analytics")',
                    type: 'GET',
                    data: { employeeId: employeeId },
                    success: function (response) {
                        if (response.success) {
                            console.log('Performance Reviews:', response.data); // Debugging the data
                            renderPerformanceReviewGraph(response.data);
                        } else {
                            alert('Failed to fetch performance reviews.');
                        }
                    },
                    error: function () {
                        alert('Error fetching performance reviews.');
                    }
                });
            }




            function confirmLogout() {
                if (confirm("Are you sure you want to log out?")) {
                    window.location.href = '@Url.Action("Logout", "Account")';
                }
            }
        </script>

        <!-- Include Bootstrap JS at the end of the body -->
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
</body>
</html>